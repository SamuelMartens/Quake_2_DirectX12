PassProperties
{
PassInput : Debug
PassVertAttr: VertexIn
}

State
{
ColorTarget  : COLOR_BACK_BUFFER
DepthTarget  : DEPTH_BACK_BUFFER
Viewport	 : 0.0, 0.0, 1.0, 1.0
BlendEnabled : false
Topology	 : Line
}

RootSignature
{
RootFlags (ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT),
CBV(b0, space = 0),
CBV(b0, space = 1),
CBV(b0, space = 2),
CBV(b0, space = 3)
}

// -== Register space convention ==-
//	0 - Global, PerPass
//	1 - Global, PerObject
//	2 - Local, PerPass
//	3 - Local, PerObject


// Attributes

struct VertexIn
{
	float4 Pos : POSITION;
}


struct VertexOut
{
	float4 Pos : SV_POSITION;
}

[Global, PerPass]
cbuffer cbFrameData : register(b0, space0)
{
	float4x4 InvertedViewProj;
	float4x4 InvertedProj;
    float4x4 ViewProj;
    float4 CameraYaw;
    float4 CameraPitch;
    float4 CameraRoll;
    float4 CameraOrigin;
	float CameraNear;
	float CameraFar;
	int ScreenWidth;
	int ScreenHeight;
}

[Global, PerObject]
cbuffer cbPerObject_Global : register(b0, space1)
{
	int DebugObjectType;
}

[Local, PerPass]
cbuffer cbPerPass_Local : register(b0, space2)
{
	float4x4 FrustumClusterInvertedView;
}

[Local, PerObject]
cbuffer cbPerObject_Local : register(b0, space3)
{
	float4 Radiance;
	int BounceNum;
	int FrustumClusterIndex;
	int IsActiveFrustumCluster;
}

// Shaders

Type : VS 
External : cbFrameData, cbPerPass_Local, cbPerObject_Global, VertexIn, VertexOut
<[

#include "Debug.passh"

VertexOut main(VertexIn vIn)
{
	VertexOut vOut;
	
	vOut.Pos = vIn.Pos;
	
	if (DebugObjectType == DEBUG_OBJECT_FRUSTUM_CLUSTER)
	{
		vOut.Pos = mul(FrustumClusterInvertedView, vOut.Pos);
	}
	
	// Funny enought, by default matrices are packed as column major.
	vOut.Pos = mul(ViewProj, vOut.Pos);
	

	return vOut;
}
]>

Type : PS 
External : VertexOut, cbPerObject_Global, cbPerObject_Local
<[

#include "Debug.passh"
#include "Constants.passh"


float4 main(VertexOut vOut) : SV_Target
{
	if (
	DebugObjectType != DEBUG_OBJECT_PATH_SEGMENT &&
	DebugObjectType != DEBUG_OBJECT_LIGHT_SAMPLE &&
	DebugObjectType != DEBUG_OBJECT_FRUSTUM_CLUSTER)
	{
		discard;
	}

	float4 color = float4(0.0, 0.0, 1.0, 1.0);

	if (DebugObjectType == DEBUG_OBJECT_LIGHT_SAMPLE)
	{
		color = float4(0.0, 1.0, 0.0, 1.0);
	}
	
	if (DebugObjectType == DEBUG_OBJECT_FRUSTUM_CLUSTER && IsActiveFrustumCluster > 0)
	{
		// Orange
		color = float4(1.0f, 0.71f, 0.0f, 1.0f);
	}

    return color;
}
]>