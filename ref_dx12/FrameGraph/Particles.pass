PassProperties
{
PassInput : Particles
PassVertAttr: VertexIn
}


State
{
ColorTarget  	: COLOR_BACK_BUFFER
DepthTarget  	: DEPTH_BACK_BUFFER
Viewport	 	: 0.0, 0.0, 1.0, 1.0
BlendEnabled 	: true
SrcBlend		: SrcAlpha
DestBlend		: InvSrcAlpha
DepthWriteMask	: false
Topology	 	: Point
}

RootSignature
{
RootFlags (ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT),
CBV(b0, space = 0)
}

// -== Register space convention ==-
//	0 - Global, PerPass
//	1 - Global, PerObject
//	2 - Local, PerPass
//	3 - Local, PerObject


// Attributes

struct VertexIn
{
    float4 Pos : POSITION;
    float4 Col : COLOR;
}


struct VertexOut
{
    float4 Pos : POSITION;
    float4 Col : COLOR;
}


struct GeomVertOut
{
    float4 Pos : SV_POSITION;
    nointerpolation float4 Center : POSITION0;
    float4 ModelPos : POSITION1;
    float4 Col : COLOR;
}

// Resources 

[Global, PerPass]
cbuffer cbFrameData : register(b0, space0)
{
	float4x4 InvertedViewProj;
	float4x4 InvertedProj;
    float4x4 ViewProj;
	float4x4 View;
    float4 CameraYaw;
    float4 CameraPitch;
    float4 CameraRoll;
    float4 CameraOrigin;
	float CameraNear;
	float CameraFar;
	int ScreenWidth;
	int ScreenHeight;
}

// Shaders

Type : VS 
External : VertexIn, VertexOut
<[
VertexOut main(VertexIn vIn)
{
    VertexOut vOut;
    
    vOut.Pos = vIn.Pos;
    vOut.Col = vIn.Col;

    return vOut;
}
]>

Type : GS 
External : cbFrameData, VertexOut, GeomVertOut
<[
// v1 +--------+ v2
//    |        |
//    |        |
//    |        |
// v0 +--------+ v3

[maxvertexcount(4)]
void main(point VertexOut vIn[1], inout TriangleStream<GeomVertOut> triStream)
{
    // hack a scale up to keep particles from disapearing
    float scale = dot(vIn[0].Pos - CameraOrigin,  CameraRoll);
    scale = scale < 20.0f ? 1.0f : 1.0f + scale * 0.004f;
    scale *= 1.5f;
 
    
    float4 center = (CameraYaw + CameraPitch) * 0.5;
    
    // Create quad
    // Remember we create triangle strip, that's why order is a bit weird 
    
    GeomVertOut v0;
    v0.ModelPos = 0.0;
    v0.Pos = mul(ViewProj, vIn[0].Pos + v0.ModelPos);
    v0.Col = vIn[0].Col;
    v0.Center = center;
    triStream.Append(v0);
   
    GeomVertOut v1;
    v1.ModelPos = CameraYaw;
    v1.Pos = mul(ViewProj, vIn[0].Pos + mul(v1.ModelPos, scale));
    v1.Col = vIn[0].Col;
    v1.Center = center;
    triStream.Append(v1); 
    
    GeomVertOut v2;
    v2.ModelPos = CameraPitch;
    v2.Pos = mul(ViewProj, vIn[0].Pos + mul(v2.ModelPos, scale));
    v2.Col = vIn[0].Col;
    v2.Center = center;
    triStream.Append(v2);
   
    GeomVertOut v3;
    v3.ModelPos = CameraYaw + CameraPitch;
    v3.Pos = mul(ViewProj, vIn[0].Pos + mul(v3.ModelPos, scale));
    v3.Col = vIn[0].Col;
    v3.Center = center;
    triStream.Append(v3);
}
]>

Type : PS
External : GeomVertOut 
<[ 

float4 main(GeomVertOut vOut) : SV_Target
{
    // We deal with quad, so everything outside 0.5 doesnt belong to
    // the square. 
    float fade = 1.0 - min(length(vOut.Center - vOut.ModelPos), 0.5) * 2.0;
    
    float4 colorOut = vOut.Col * fade;
    
    
    return colorOut;
}

]>