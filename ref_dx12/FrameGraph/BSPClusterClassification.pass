PassProperties
{
PassInput : PostProcess
PassThreadGroups: 32, 24, 1
}

State
{
}

RootSignature
{
RootFlags (ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT),
CBV(b0, space = 0),
DescriptorTable(SRV(t1, numDescriptors = 1, space = 0)),
DescriptorTable(SRV(t0, numDescriptors = 1, space = 2),
UAV(u0, numDescriptors = 1, space = 2))
}


// -== Register space convention ==-
//	0 - Global, PerPass
//	1 - Global, PerObject
//	2 - Local, PerPass
//	3 - Local, PerObject


// Structs
struct AABB
{
	float4 Min;
	float4 Max;
}

// --- Global ---

[Global, PerPass]
cbuffer cbClusterAABBParameters : register(b0, space0)
{
	int ClusterAABBsSize;
}

[Global, PerPass]
StructuredBuffer<AABB> ClusterAABBs : register(t1, space0)

// --- Local ---
[Local, PerPass, Bind: GBuffer_Position]
Texture2D GBuffer_Position : register(t0, space2)

[Local, PerPass, Bind: ClusterClassification]
RWTexture2D<int> ClusterClassification : register(u0, space2)


Type : CS
External : AABB, ClusterAABBs, cbClusterAABBParameters, ClusterClassification, GBuffer_Position
<[

[numthreads(32, 32, 1)]
void main(int3 dispatchThreadID : SV_DispatchThreadID)
{
	if (ClusterAABBsSize == 0)
	{
		return;
	}

	int clusterIndex = -1;
	
	float3 position = GBuffer_Position[dispatchThreadID.xy].xyz;
	
	// Iterate over each AABB
	for (int i = 0; i < ClusterAABBsSize; ++i)
	{
		AABB clusterAABB = ClusterAABBs.Load(i);
		
		float3 diagonal = normalize(clusterAABB.Max.xyz - clusterAABB.Min.xyz);
		
		// Extend a bit to avoid floating point errors during testing
		const float epsilon = 0.005f;
		clusterAABB.Min.xyz = clusterAABB.Min.xyz - diagonal * epsilon;
		clusterAABB.Max.xyz = clusterAABB.Max.xyz + diagonal * epsilon;
		
		
		// If inside AABB
		if (all(position >= clusterAABB.Min.xyz) &&
			all(position <= clusterAABB.Max.xyz))
		{
			clusterIndex = i;
			break;
		}
	}
	
	ClusterClassification[dispatchThreadID.xy] = clusterIndex; 
}

]>
