PassProperties
{
PassInput : PostProcess
// Should match macros defined in shader
PassThreadGroups: 2, 1, 1
}

State
{
}

RootSignature
{
RootFlags (ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT),
CBV(b0, space = 0),
DescriptorTable(UAV(u2, numDescriptors = 2, space = 0)),
DescriptorTable(SRV(t4, numDescriptors = 1, space = 0)),
DescriptorTable(SRV(t1, numDescriptors = 2, space = 2)),
DescriptorTable(UAV(u0, numDescriptors = 1, space = 2))
}


// -== Register space convention ==-
//	0 - Global, PerPass
//	1 - Global, PerObject
//	2 - Local, PerPass
//	3 - Local, PerObject

// Structs
struct GPULight
{
	float4x4 worldTransform;
	float4 colorAndIntensity;
	float2 extends;
	int type;
}

struct GPULightBoundingVolume
{
	float4 origin;
	float radius;
}

struct AABB
{
	float4 Min;
	float4 Max;
}

struct LightCullingDataStruct
{
	int globalIndexCount;
}

struct PerClusterLightIndexData
{
	int offset;
	int count;
}

// Resources
[Global, PerPass]
cbuffer cbFrameData : register(b0, space0)
{
	float4x4 InvertedViewProj;
	float4x4 InvertedProj;
    float4x4 ViewProj;
	float4x4 View;
    float4 CameraYaw;
    float4 CameraPitch;
    float4 CameraRoll;
    float4 CameraOrigin;
	float CameraNear;
	float CameraFar;
	int ScreenWidth;
	int ScreenHeight;
	int LightListSize;
}

[Global, PerPass]
StructuredBuffer<GPULightBoundingVolume> LightBoundingVolumes : register(t4, space0)

[Global, PerPass]
RWStructuredBuffer<int> ClusteredLightingIndexList : register(u2, space0)

[Global, PerPass]
RWStructuredBuffer<PerClusterLightIndexData> PerClusterLightIndexDataList : register(u3, space0)

// --- Local res
[Local, PerPass, Bind: ClusteredLight_UniqueActiveClusters]
StructuredBuffer<int> UniqueActiveClustersList : register(t1, space2)

[Local, PerPass]
StructuredBuffer<AABB> FrustumClusters : register(t2, space2)

[Local, PerPass]
RWStructuredBuffer<LightCullingDataStruct> LightCullingData : register(u0, space2)

Type : CS
External : GPULightBoundingVolume, cbFrameData, LightBoundingVolumes, UniqueActiveClustersList, AABB, FrustumClusters, LightCullingDataStruct, LightCullingData, ClusteredLightingIndexList, PerClusterLightIndexData, PerClusterLightIndexDataList 
<[

#include "ClusteredLighting.passh"
#include "Debug.passh"

// Total thread group size should match SHARED_TEST_DATA_ARRAY_SIZE
#define THREAD_GROUP_SIZE_X 32
#define THREAD_GROUP_SIZE_Y 10
#define THREAD_GROUP_SIZE_Z 1

#define DISPATCH_SIZE int3(2, 1, 1)

// This should match maximum size of the available groupshared memory,
// so if GPULightBoundingVolume is changed in size, think about changing this
#define SHARED_TEST_DATA_ARRAY_SIZE 320

groupshared GPULightBoundingVolume sharedTestData[SHARED_TEST_DATA_ARRAY_SIZE];

bool IsSphereAABBIntersect(float3 sphereOrigin, float sphereRadius, AABB aabb)
{
	const float3 aabbCenter = (aabb.Min + aabb.Max).xyz / 2.0f;
	const float3 aabbExtends = (aabb.Max - aabb.Min).xyz / 2.0f;
	
	const float3 aabbToSphere = sphereOrigin - aabbCenter - aabbExtends; 
	
	return dot(aabbToSphere, aabbToSphere) < sphereRadius * sphereRadius;
}

[numthreads(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, THREAD_GROUP_SIZE_Z)]
void main(int3 dispatchThreadID : SV_DispatchThreadID, uint linearGroupIndex : SV_GroupIndex)
{
	const int threadsGroupSize = THREAD_GROUP_SIZE_X * THREAD_GROUP_SIZE_Y * THREAD_GROUP_SIZE_Z;
	const int numBatches = ceil(float(LightListSize) / threadsGroupSize);
	
	const int3 globalThreasNums = int3(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, THREAD_GROUP_SIZE_Z) * DISPATCH_SIZE;
	const int globalThreadIndex = dispatchThreadID.z * globalThreasNums.x * globalThreasNums.y + dispatchThreadID.y * globalThreasNums.x  + dispatchThreadID.x;
	
	// -1 check if we have active cluster for this thread
	const bool isThreadActive = UniqueActiveClustersList[globalThreadIndex] != -1;
	const int threadClusterIndex = UniqueActiveClustersList[globalThreadIndex];
	
	int visibleLightCount = 0;
	int visibleLightIndices[MAX_LIGHTS_PER_CLUSTER];
	
	for (int batchIndex = 0; batchIndex < numBatches; ++batchIndex)
	{
		const int lightIndex = min(LightListSize - 1, batchIndex * threadsGroupSize + linearGroupIndex);
		
		GPULightBoundingVolume boundingVolume = LightBoundingVolumes[lightIndex];
		// Transfer light bounding volume to the view space
		boundingVolume.origin = mul(View, boundingVolume.origin);
		
		sharedTestData[linearGroupIndex] = boundingVolume;

		GroupMemoryBarrierWithGroupSync();
		
		if (isThreadActive == true)
		{	
			AABB clusterAABB = FrustumClusters[threadClusterIndex];
		
			for (int lightIndex = 0; lightIndex < threadsGroupSize; ++lightIndex)
			{
				if (IsSphereAABBIntersect(
					sharedTestData[lightIndex].origin.xyz,
					sharedTestData[lightIndex].radius,
					clusterAABB))
				{
					visibleLightIndices[visibleLightCount] = batchIndex * threadsGroupSize + lightIndex;
					visibleLightCount += 1;
				}
			}
		}
	}
	
	GroupMemoryBarrierWithGroupSync();
	
	int offset = 0;
	InterlockedAdd(LightCullingData[0].globalIndexCount, visibleLightCount, offset); 
	
	for (int i = 0; i < visibleLightCount; ++i)
	{
		ClusteredLightingIndexList[offset + i] = visibleLightIndices[i];
	}
	
	PerClusterLightIndexDataList[threadClusterIndex].offset = offset;
	PerClusterLightIndexDataList[threadClusterIndex].count = visibleLightCount;
}

]>

