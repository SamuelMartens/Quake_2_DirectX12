PassProperties
{
PassInput : PostProcess
// Edit this to appropriate number
PassThreadGroups : 32, 1, 1
}

State
{
 
}

RootSignature
{
RootFlags (ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT),
SRV(t0),
SRV(t1),
SRV(t2),
SRV(t3),
SRV(t4),
SRV(t5),
SRV(t6),
SRV(t7),
CBV(b0)
}

struct BSPNode
{
	
	
	float4 bbMin;
	float4 bbMax;
	
	int leftChild;
	int rightChild;
	
	int objectsOffset;
	int objectsSize;
	
	int cluster;
}


struct Object
{
	int vertexOffset;
	int vertexSize;
	
	int indexOffset;
	int indexSize;
}

struct Vertex
{
	float4 position;
	float4 normal;
}

// I do huve clusters info for point lights, but skipping it for now
struct PointLight
{
	float4 position;
	float4 color;
	
	float intensity; 
}

// Think how to properly represent this
struct AreaLight
{
	int staticObjectIndex;
	int radiance;
}

[Global, PerPass]
StructuredBuffer<BSPNode> gBsp : register(t0)

[Global, PerPass]
StructuredBuffer<Object> gObjects : register(t1)

[Global, PerPass]
StructuredBuffer<int> gIndices : register(t2)

[Global, PerPass]
StructuredBuffer<Vertex> gVertices : register(t3)

[Global, PerPass]
StructuredBuffer<float4> gSamples : register(t4)

[Global, PerPass]
StructuredBuffer<PointLight> gPointLights : register(t5)

[Global, PerPass]
StructuredBuffer<AreaLight> gAreaLights : register(t6)

[Global, PerPass]
StructuredBuffer<int> gClusterVisibility : register(t6)


[Global, PerPass]
cbuffer gProbeData : register(b0)
{
	int samplerSetSize;
	int samplerSetIndex;
	float4 probePosition;
}

Type : CS
External: gBsp, gObjects, gIndices, gVertices
<[

// Shoot ray in certain direction in and get back radiance
float PathTrace(float4 position, float4 ray)
{

}

[numthreads(32, 1, 1)]
void main(int3 dispatchThreadID : SV_DispatchThreadID)
{

}

]>
