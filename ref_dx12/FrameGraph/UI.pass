PassProperties
{
PassInput : UI
PassVertAttr: VertexIn
}

State
{
ColorTarget  : COLOR_BACK_BUFFER
DepthTarget  : DEPTH_BACK_BUFFER
Viewport	 : 0.0, 0.0, 1.0, 1.0
BlendEnabled : false
Topology	 : Triangle
}

RootSignature
{
RootFlags (ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT),
DescriptorTable(SRV(t0, numDescriptors = 1, space = 1)),
DescriptorTable(SRV(t1, numDescriptors = 2)),
DescriptorTable(Sampler(s0)),
CBV(b0)
}

// Attributes

struct VertexIn
{
	float4 Pos : POSITION;
	float2 Tex : TEXCOORD;
}


struct VertexOut
{
	float4 Pos : SV_POSITION;
	float2 Tex : TEXCOORD;
}

// Resources 

[Global, PerObject]
cbuffer cbPerObject : register(b0)
{
	float4x4 gWorldViewProj;
	int type;
}

[Global, PerObject]
Texture2D gDiffuseMap : register(t0, space1)

[Global, PerPass]
Texture2D gFontTex : register(t1)

[Global, PerPass]
Texture2D gMovieTex : register(t2)

[Global, PerPass]
SamplerState gSamLinearWrap : register(s0)

// Shaders

Type : VS 
External : cbPerObject, VertexIn, VertexOut
<[
VertexOut main(VertexIn vIn)
{
	VertexOut vOut;
	// Funny enought, by default matrices are packed as column major.
	vOut.Pos = mul(gWorldViewProj, vIn.Pos);

	vOut.Tex = vIn.Tex;

	return vOut;
}
]>

Type : PS 
External : gDiffuseMap, gSamLinearWrap, VertexOut, gMovieTex, gFontTex, cbPerObject
<[
float4 main(VertexOut vOut) : SV_Target
{

	float4 color = float4(0.0, 0.0, 0.0, 1.0);
	
	// Picture object
	if (type == 0)
	{
		color =	gDiffuseMap.Sample(gSamLinearWrap, vOut.Tex);
	}
	// Text
	else if (type == 1)
	{
		color =	gFontTex.Sample(gSamLinearWrap, vOut.Tex);
	}
	// Movie
	else if (type == 2)
	{
		color =	gMovieTex.Sample(gSamLinearWrap, vOut.Tex);
	}
	else
	{
		color = float4(1.0, 0.0, 0.0, 1.0);
	}
	
    
    if (color.a == 0)
    {
        discard;
    }
    
    return color;
}
]>