PassProperties
{
PassInput : Debug
PassVertAttr: VertexIn
}

State
{
ColorTarget  : BACK_BUFFER
DepthTarget  : BACK_BUFFER
Viewport	 : 0.0, 0.0, 1.0, 1.0
BlendEnabled : false
Topology	 : Triangle
}

RootSignature
{
RootFlags (ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT),
DescriptorTable(SRV(t0, numDescriptors = 1)),
CBV(b0),
CBV(b1),
CBV(b2)
}

// Attributes

struct VertexIn
{
	float4 Pos : POSITION;
}


struct VertexOut
{
	float4 Pos : SV_POSITION;
	float4 LocalPos : POSITION;
}

// Resources  
[Global, PerPass]
StructuredBuffer<float4> sbDiffuseProbes : register(t0)

[Global, PerPass]
cbuffer cbPerPass : register(b0)
{
    float4x4 gViewProj;
    float4 gCameraYaw;
    float4 gCameraPitch;
    float4 gCameraRoll;
    float4 gCameraOrigin;
}

[Local, PerObject]
cbuffer cbPerObject_Local : register(b1)
{
	float4 gCenter;
}

[Global, PerPass]
cbuffer cbProbeData : register(b2)
{
	int gIsProbesEmpty;
}

// Shaders

Type : VS 
External : cbPerPass, cbPerObject_Local, VertexIn, VertexOut
<[
VertexOut main(VertexIn vIn)
{
	VertexOut vOut;
	// Funny enought, by default matrices are packed as column major.
	vOut.Pos = mul(gViewProj, vIn.Pos);
	vOut.LocalPos =  vIn.Pos - gCenter; 
	
	return vOut;
}
]>

Type : PS 
External : VertexOut, sbDiffuseProbes, cbProbeData
<[
float4 main(VertexOut vOut) : SV_Target
{

	float4 color = normalize(vOut.LocalPos) * 0.5 + 0.5;
	
    return color;
}
]>