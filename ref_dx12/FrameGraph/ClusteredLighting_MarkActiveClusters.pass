PassProperties
{
PassInput : PostProcess
PassThreadGroups: 32, 24, 1
}

State
{
}

RootSignature
{
RootFlags (ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT),
CBV(b0, space = 0),
CBV(b1, space = 0),
DescriptorTable(SRV(t0, numDescriptors = 1, space = 0)),
DescriptorTable(UAV(u0, numDescriptors = 1, space = 2))
}

// -== Register space convention ==-
//	0 - Global, PerPass
//	1 - Global, PerObject
//	2 - Local, PerPass
//	3 - Local, PerObject


// -- Global CBVs

[Global, PerPass]
cbuffer cbFrameData : register(b0, space0)
{
	float4x4 InvertedViewProj;
	float4x4 InvertedProj;
    float4x4 ViewProj;
	float4x4 View;
    float4 CameraYaw;
    float4 CameraPitch;
    float4 CameraRoll;
    float4 CameraOrigin;
	float CameraNear;
	float CameraFar;
	int ScreenWidth;
	int ScreenHeight;
	int LightListSize;
}

[Global, PerPass]
cbuffer cbTileData : register(b1, space0)
{
	int TileWidth;
	int TileHeight;
	int NumFrustumSlices;
	int ClusterListSize;
}

[Global, PerPass]
Texture2D DepthBuffer : register (t0, space0)

// --- Local CBVs ---


// --- Local res

[Local, PerPass, Bind: ClusteredLight_ActiveClusters]
RWStructuredBuffer<int> ActiveClustersList : register(u0, space2)

Type : CS
External : cbFrameData, cbTileData, ActiveClustersList, DepthBuffer
<[

float3 GetViewPosFromDepthAndScreenCoord(int2 screenCoord, float depth)
{
	// NOTE: This doesn't account for the screen offset
	const float4 ndcPixelCoords = float4(
	((float)screenCoord.x / ScreenWidth) * 2.0f - 1.0f, 
	((float)screenCoord.y / ScreenHeight) * -2.0f + 1.0f,
	depth, 
	1.0f);

	float4 worldCoord = mul(InvertedProj, ndcPixelCoords);
	worldCoord = worldCoord / worldCoord.w;

	return worldCoord.xyz;
}


int GetFrustumSlice(float depth)
{

	const float farNearLog = log(CameraFar/CameraNear);
	
	const float equationPart1 = NumFrustumSlices / farNearLog;
	const float equationPart2 = NumFrustumSlices * log(CameraNear) / farNearLog;
	
	return floor(log(depth) * equationPart1 - equationPart2);
}

int GetClusterIndex(int2 screentCoord, float depth)
{
	// Need to negate depth, because I use right hand coordinate system
	depth = -depth;

	const int clusterZIndex = GetFrustumSlice(depth);
	const int2 clusterXYIndices = screentCoord / int2(TileWidth, TileHeight);
	
	const int3 numClusters = int3(int2(ScreenWidth, ScreenHeight) / int2(TileWidth, TileHeight), NumFrustumSlices);
	
	const int clusterLinearIndex = clusterZIndex + 
		numClusters.z * clusterXYIndices.y +
		(numClusters.z * numClusters.y) * clusterXYIndices.x;
	
	return clusterLinearIndex;
}

[numthreads(32, 32, 1)]
void main(int3 dispatchThreadID : SV_DispatchThreadID)
{
	const float depth = DepthBuffer.Load(int3(dispatchThreadID.xy, 0)).x;
	const float3 pixelViewPosition = GetViewPosFromDepthAndScreenCoord(dispatchThreadID.xy, depth);
	
	const int clusterIndex = GetClusterIndex(dispatchThreadID.xy, pixelViewPosition.z);
	ActiveClustersList[clusterIndex] = 1;
}

]>