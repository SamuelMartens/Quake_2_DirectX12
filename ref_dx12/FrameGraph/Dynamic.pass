PassProperties
{
PassInput : Dynamic
PassVertAttr: VertexIn
PassSlotLayout: [Pos0 : 0, Pos1 : 1, Normal0 : 2, Normal1 : 3, Tex : 4]
}

State
{
ColorTarget  : GBuffer_Position, GBuffer_Albedo, GBuffer_NormalsMaterial
DepthTarget  : DEPTH_BACK_BUFFER
Viewport	 : 0.0, 0.0, 1.0, 1.0
BlendEnabled : false
Topology	 : Triangle
}

RootSignature
{
RootFlags (ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT),
CBV(b0, space = 3),
DescriptorTable(SRV(t0, numDescriptors = 1, space = 0)),
DescriptorTable(Sampler(s0, numDescriptors = 1, space = 0))
}


// -== Register space convention ==-
//	0 - Global, PerPass
//	1 - Global, PerObject
//	2 - Local, PerPass
//	3 - Local, PerObject

// Attributes

struct VertexIn
{
	float4 Pos0 : POSITION0;
    float4 Pos1 : POSITION1;
	float4 Normal0 : NORMAL0;
    float4 Normal1 : NORMAL1;
	float2 Tex : TEXCOORD;
}


struct VertexOut
{
	float4 Pos : SV_POSITION;
	float4 Normal : NORMAL;
	float4 WorldPos : POSITION;	
	float2 Tex : TEXCOORD;
}

struct PixelOut
{
	float4 Position :	SV_Target0;
	float4 Albedo :		SV_Target1;
	float4 Normal :		SV_Target2;
}

// Resources

[Local, PerObject]
cbuffer cbPerObject : register(b0, space3)
{
	float4x4 WorldViewProj;
	float4x4 World;
    float4 AnimMove;
    float4 FrontLerp;
    float4 BackLerp;
	int MaterialId;
}

[Global, PerObject]
Texture2D DiffuseMap : register(t0, space0)

[Global, PerPass]
SamplerState gSamLinearWrap : register(s0, space0)

// Shaders

Type : VS
External : cbPerObject, VertexIn, VertexOut
<[
VertexOut main(VertexIn vIn)
{
    float4 interpolatedPos = AnimMove + vIn.Pos0 * BackLerp + vIn.Pos1 * FrontLerp;
    interpolatedPos.w = 1.0f;

	float4 interpolatedNormal =  vIn.Normal0 * BackLerp + vIn.Normal1 * FrontLerp;
	interpolatedNormal.w = 0.0f;

	VertexOut vOut;
    // Funny enought, by default matrices are packed as column major.
    vOut.Pos = mul(WorldViewProj, interpolatedPos);
    vOut.Normal = mul(World, interpolatedNormal);
	vOut.WorldPos = mul(World, interpolatedPos);
	vOut.Tex = vIn.Tex;

	return vOut;
}
]>

Type : PS 
External : DiffuseMap, gSamLinearWrap, VertexOut, PixelOut, cbPerObject
<[
PixelOut main(VertexOut vOut)
{
	float4 color = DiffuseMap.Sample(gSamLinearWrap, vOut.Tex);
    
    if (color.a == 0)
    {
        discard;
    }
    
	PixelOut output;
	
	output.Albedo = color;
	output.Normal = float4(normalize(vOut.Normal.xyz), asfloat(MaterialId));
	output.Position = vOut.WorldPos;
	
    return output;
}
]>