PassProperties
{
PassInput : PostProcess
// Should match macros defined in shader
PassThreadGroups: 2, 1, 1
}

State
{
}

RootSignature
{
RootFlags (ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT),
CBV(b0, space = 0),
DescriptorTable(SRV(t4, numDescriptors = 2, space = 0)),
DescriptorTable(SRV(t1, numDescriptors = 1, space = 2))
}


// -== Register space convention ==-
//	0 - Global, PerPass
//	1 - Global, PerObject
//	2 - Local, PerPass
//	3 - Local, PerObject

// Structs
struct GPULight
{
	float4x4 worldTransform;
	float4 colorAndIntensity;
	float2 extends;
	int type;
}

struct GPULightBoundingVolume
{
	float4 origin;
	float radius;
}

// Resources
[Global, PerPass]
cbuffer cbFrameData : register(b0, space0)
{
	float4x4 InvertedViewProj;
	float4x4 InvertedProj;
    float4x4 ViewProj;
	float4x4 View;
    float4 CameraYaw;
    float4 CameraPitch;
    float4 CameraRoll;
    float4 CameraOrigin;
	float CameraNear;
	float CameraFar;
	int ScreenWidth;
	int ScreenHeight;
	int LightListSize;
}

[Global, PerPass]
StructuredBuffer<GPULightBoundingVolume> LightBoundingVolumes : register(t4, space0)

[Global, PerPass]
StructuredBuffer<GPULight> LightsList : register(t5, space0)

// --- Local res
[Local, PerPass, Bind: ClusteredLight_UniqueActiveClusters]
StructuredBuffer<int> UniqueActiveClustersList : register(t1, space2)

Type : CS
External : GPULight, GPULightBoundingVolume, cbFrameData, LightBoundingVolumes, LightsList, UniqueActiveClustersList
<[

#include "ClusteredLighting.passh"
#include "Debug.passh"

// Total thread group size should match SHARED_TEST_DATA_ARRAY_SIZE
#define THREAD_GROUP_SIZE_X 32
#define THREAD_GROUP_SIZE_Y 10
#define THREAD_GROUP_SIZE_Z 1

#define DISPATCH_SIZE int3(2, 1, 1)

// Carefull, when changing this, read next comment for more info
struct LightTestData
{
	float4 origin;
	float4 normal;
	float radius;
	int type;
}

// This should match maximum size of the available groupshared memory,
// so if LightTestData is changed in size, think about changing this
#define SHARED_TEST_DATA_ARRAY_SIZE 320

groupshared LightTestData sharedTestData[SHARED_TEST_DATA_ARRAY_SIZE]

[numthreads(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, THREAD_GROUP_SIZE_Z)]
void main(int3 dispatchThreadID : SV_DispatchThreadID, uint linearGroupIndex : SV_GroupIndex)
{
	const int threadsGroupSize = THREAD_GROUP_SIZE_X * THREAD_GROUP_SIZE_Y * THREAD_GROUP_SIZE_Z;
	const int numBatches = ceil(float(LightListSize) / threadsGroupSize);
	
	const int3 globalThreasNums = int3(THREAD_GROUP_SIZE_X, THREAD_GROUP_SIZE_Y, THREAD_GROUP_SIZE_Z) * DISPATCH_SIZE;
	const int globalThreadIndex = dispatchThreadID.z * globalThreasNums.x * globalThreasNums.y + dispatchThreadID.y * globalThreasNums.x  + dispatchThreadID.x;
	
	// -1 check if we have active cluster for this thread
	const bool isThreadActive = UniqueActiveClustersList[globalThreadIndex] != -1;
	
	int visibleLightCount = 0;
	int visibleLightIndices[MAX_LIGHTS_PER_CLUSTER];
	
	for (int batchIndex = 0; batchIndex < numBatches; ++batchIndex)
	{
		const int lightIndex = min(LightListSize - 1, batchIndex * threadsGroupSize + linearGroupIndex);
		
		GPULight light = LightsList[lightIndex];
		GPULightBoundingVolume boundingVolume = LightBoundingVolumes[lightIndex];
		
		LightTestData lightTestData;
		lightTestData.origin = boundingVolume.origin;
		lightTestData.radius = boundingVolume.radius;
		lightTestData.type = light.type;
		
		if (lightTestData.type == DEBUG_POINT_LIGHT)
		{
			lightTestData.normal = float4(0.0f, 0.0f, 0.0f , 0.0f);
		}
		else
		{
			lightTestData.normal =  mul(light.worldTransform, float4(0.0f, 0.0f, 1.0f, 0.0f));
		}
		
		sharedTestData[linearGroupIndex] = lightTestData;
		
		GroupMemoryBarrierWithGroupSync();
		
		for (int lightIndex = 0; lightIndex < threadsGroupSize; ++lightIndex)
		{
			
		}
		
	}
}

]>

