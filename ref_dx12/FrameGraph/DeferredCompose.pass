PassProperties
{
PassInput : PostProcess
PassThreadGroups: 32, 24, 1
}

State
{
}

RootSignature
{
RootFlags (ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT),
DescriptorTable(UAV(u0, numDescriptors = 1, space = 0)),
DescriptorTable(SRV(t0, numDescriptors = 4, space = 2))
}

// -== Register space convention ==-
//	0 - Global, PerPass
//	1 - Global, PerObject
//	2 - Local, PerPass
//	3 - Local, PerObject


[Local, PerPass, Bind: GBuffer_Albedo]
Texture2D GBuffer_Albedo : register(t0, space2)

[Local, PerPass, Bind: GBuffer_Normals]
Texture2D GBuffer_Normals : register(t1, space2)

[Local, PerPass, Bind: ClusterClassification]
Texture2D<int> ClusterClassification : register(t2, space2)

[Local, PerPass, Bind: IndirectLightBuffer]
Texture2D IndirectLightBuffer : register(t3, space2)

[Global, PerPass, Bind: ComposeBuffer]
RWTexture2D<float4> ComposeBuffer : register(u0, space0)

Type : CS
External : GBuffer_Albedo, ComposeBuffer, GBuffer_Normals, ClusterClassification, IndirectLightBuffer
<[

float4 VisualizeClusterId(int id)
{
	float4 color = float4(0.0f, 0.0f, 0.0f, 1.0f);
	
	color.x =  (0xF & id) / 16.0f;
	color.y = (0xF & (id >> 4)) / 16.0f;
	color.z = (0xF & (id >> 8)) / 16.0f;
	color.w = 1.0f;
	
	return color;
}

[numthreads(32, 32, 1)]
void main(int3 dispatchThreadID : SV_DispatchThreadID)
{
	//ComposeBuffer[dispatchThreadID.xy] = float4(GBuffer_Albedo[dispatchThreadID.xy].xyz, 1.0f);
	
	//float4 normal = float4(GBuffer_Normals[dispatchThreadID.xy].xy, 0.0f, 0.0f);
	//normal.z = sqrt(1.0 - normal.x * normal.x - normal.y * normal.y);
	//ComposeBuffer[dispatchThreadID.xy] = normal * 0.5 + 0.5;

	// Visualize cluster classification`
	{
		int id = ClusterClassification[dispatchThreadID.xy].r;
	
		float4 color = float4(0.0f, 0.0f, 0.0f, 1.0f);
	
		color.x =  (0xF & id) / 16.0f;
		color.y = (0xF & (id >> 4)) / 16.0f;
		color.z = (0xF & (id >> 8)) / 16.0f;
		color.w = 1.0f;
		
		ComposeBuffer[dispatchThreadID.xy] = color; 
	}
	
	ComposeBuffer[dispatchThreadID.xy] = IndirectLightBuffer[dispatchThreadID.xy];
}



]>

