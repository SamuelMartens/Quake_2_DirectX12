PassProperties
{
PassInput : PostProcess
PassThreadGroups: 1, 1, 1
}

State
{
}

RootSignature
{
RootFlags (ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT),
DescriptorTable(UAV(u0, numDescriptors = 2, space = 2)),
CBV(b1, space = 0)
}

// -== Register space convention ==-
//	0 - Global, PerPass
//	1 - Global, PerObject
//	2 - Local, PerPass
//	3 - Local, PerObject

// -- Global CBVs

[Global, PerPass]
cbuffer cbTileData : register(b1, space0)
{
	int TileWidth;
	int TileHeight;
	int NumFrustumSlices;
	int ClusterListSize;
}

// --- Local tex

[Local, PerPass, Bind: ClusteredLight_ActiveClusters]
RWStructuredBuffer<int> ActiveClustersList : register(u0, space2)

[Local, PerPass, Bind: ClusteredLight_UniqueActiveClusters]
RWStructuredBuffer<int> UniqueActiveClustersList : register(u1, space2)

Type : CS
External : cbTileData, ActiveClustersList, UniqueActiveClustersList
<[

#define THREAD_GROUP_SIZE 1024

groupshared int globalActiveClusterCount = 0;

[numthreads(THREAD_GROUP_SIZE, 1, 1)]
void main(int3 dispatchThreadID : SV_DispatchThreadID)
{
	const int perThreadClustersCheck = ceil((float)ClusterListSize / THREAD_GROUP_SIZE);
	
	const int threadMinClusterIndex = perThreadClustersCheck * dispatchThreadID.x;
	const int threadMaxClusterIndex = perThreadClustersCheck * (dispatchThreadID.x + 1);
	
	for (int i = threadMinClusterIndex; i < threadMaxClusterIndex && i < ClusterListSize; ++i)
	{
		if (ActiveClustersList[i] == 1)
		{
			uint offset = 0;
			InterlockedAdd(globalActiveClusterCount, 1, offset);
			
			UniqueActiveClustersList[offset] = i;
		}
	}
}

]>