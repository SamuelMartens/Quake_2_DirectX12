PassProperties
{
PassInput : Debug
PassVertAttr: VertexIn
}

State
{
ColorTarget  : COLOR_BACK_BUFFER
DepthTarget  : DEPTH_BACK_BUFFER
Viewport	 : 0.0, 0.0, 1.0, 1.0
BlendEnabled : false
Topology	 : Line
}

RootSignature
{
RootFlags (ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT),
CBV(b0),
CBV(b1),
CBV(b2)
}

// Attributes

struct VertexIn
{
	float4 Pos : POSITION;
}


struct VertexOut
{
	float4 Pos : SV_POSITION;
}

[Global, PerPass]
cbuffer cbPerPass : register(b0)
{
    float4x4 gViewProj;
    float4 gCameraYaw;
    float4 gCameraPitch;
    float4 gCameraRoll;
    float4 gCameraOrigin;
}

[Global, PerObject]
cbuffer cbPerObject_Global : register(b1)
{
	int gDebugObjectType;
}

[Local, PerObject]
cbuffer cbPerObject_Local : register(b2)
{
	float4 gRadiance;
	int gBounceNum;
}

// Shaders

Type : VS 
External : cbPerPass, VertexIn, VertexOut
<[

VertexOut main(VertexIn vIn)
{
	VertexOut vOut;
	// Funny enought, by default matrices are packed as column major.
	vOut.Pos = mul(gViewProj, vIn.Pos);
	

	return vOut;
}
]>

Type : PS 
External : VertexOut, cbPerObject_Global, cbPerObject_Local
<[

@include "Debug.passh"
@include "Constants.passh"


float4 main(VertexOut vOut) : SV_Target
{
	if (gDebugObjectType != DEBUG_OBJECT_PATH_SEGMENT && gDebugObjectType != DEBUG_OBJECT_LIGHT_SAMPLE)
	{
		discard;
	}

	float4 color = float4(0.0, 0.0, 1.0, 1.0);

	if (gDebugObjectType == DEBUG_OBJECT_LIGHT_SAMPLE)
	{
		color = float4(0.0, 1.0, 0.0, 1.0);
	}

    return color;
}
]>