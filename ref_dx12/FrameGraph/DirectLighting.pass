PassProperties
{
PassInput : PostProcess
PassThreadGroups: 64, 48, 1
}

State
{
}

RootSignature
{
RootFlags (ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT),
CBV(b0, space = 0),
CBV(b1, space = 0),
CBV(b0, space = 2),
DescriptorTable(SRV(t4, numDescriptors = 3, space = 0)),
DescriptorTable(UAV(u2, numDescriptors = 2, space = 0)),
DescriptorTable(SRV(t0, numDescriptors = 3, space = 2)),
DescriptorTable(UAV(u0, numDescriptors = 1, space = 2))
}

// -== Register space convention ==-
//	0 - Global, PerPass
//	1 - Global, PerObject
//	2 - Local, PerPass
//	3 - Local, PerObject

// Structs
struct GPULight
{
	float4x4 worldTransform;
	float4 colorAndIntensity;
	float2 extends;
	int type;
}

struct GPULightBoundingVolume
{
	float4 origin;
	float radius;
}

struct PerClusterLightIndexData
{
	int offset;
	int count;
}

struct Material
{
	float roughness;
	float metalness;
	float reflectance;
}

[Global, PerPass]
cbuffer cbFrameData : register(b0, space0)
{
	float4x4 InvertedViewProj;
	float4x4 InvertedProj;
    float4x4 ViewProj;
	float4x4 View;
    float4 CameraYaw;
    float4 CameraPitch;
    float4 CameraRoll;
    float4 CameraOrigin;
	float CameraNear;
	float CameraFar;
	int ScreenWidth;
	int ScreenHeight;
	int LightListSize;
}

[Global, PerPass]
cbuffer cbTileData : register(b1, space0)
{
	int TileWidth;
	int TileHeight;
	int NumFrustumSlices;
	int ClusterListSize;
}

[Local, PerPass]
cbuffer cbPBROverrides : register(b0, space2)
{
	float RoughnessOverride;
	float MetalnessOverride;
	float ReflectanceOverride;
	int IsUseMaterialOverrides;
}

[Global, PerPass]
StructuredBuffer<GPULightBoundingVolume> LightBoundingVolumes : register(t4, space0)

[Global, PerPass]
StructuredBuffer<GPULight> LightsList : register(t5, space0)

[Global, PerPass]
StructuredBuffer<Material> MaterialList : register(t6, space0)

[Global, PerPass]
RWStructuredBuffer<int> ClusteredLightingIndexList : register(u2, space0)

[Global, PerPass]
RWStructuredBuffer<PerClusterLightIndexData> PerClusterLightIndexDataList : register(u3, space0)

// --- Local res
[Local, PerPass, Bind: GBuffer_Albedo]
Texture2D GBuffer_Albedo : register(t0, space2)

[Local, PerPass, Bind: GBuffer_NormalsMaterial]
Texture2D GBuffer_NormalsMaterial : register(t1, space2)

[Local, PerPass, Bind: GBuffer_Position]
Texture2D GBuffer_Position : register (t2, space2)

[Local, PerPass, Bind: DirectLightBuffer]
RWTexture2D<float4> DirectLightBuffer : register(u0, space2)

Type : CS
External : GPULight, LightsList, ClusteredLightingIndexList, PerClusterLightIndexData, PerClusterLightIndexDataList, GBuffer_Albedo, 
	GBuffer_NormalsMaterial, GBuffer_Position, DirectLightBuffer, cbTileData, cbFrameData, GPULightBoundingVolume, LightBoundingVolumes, cbPBROverrides,
	Material, MaterialList
<[

#include "Debug.passh"
#include "Constants.passh"
#include "ClusteredLighting.passh"

#define ENABLE_POINT_LIGHTS 1
#define ENABLE_AREA_LIGHTS 1

#define ENABLE_SPECULAR 1
#define ENABLE_DIFFUSE 1

float3 GetF0FromRelfectance(float reflectance)
{
	// From Frostbite PBR course whitepaper
	return (0.16f * reflectance * reflectance).xxx;
}

float3 ComputePlaneIntersectionPoint(float3 fromPoint, float3 direction, float3 planeNormal, float3 planePoint)
{
	return fromPoint + direction * (dot(planeNormal, planePoint - fromPoint) / dot(planeNormal, direction));
}

float ComputAttenuationWindowedFunction(float dist, float distMax)
{
	return pow(max(0.0f, 1.0f - pow(dist / distMax, 4)), 2);
}

float ComputeDistanceAttenuation(float dist, float dist0, float distMax)
{
	float attenuation = 0.0f;

	if (dist <= dist0)
	{
		// Treat dist0 as distance to surface. If we measure light closer than that distance
		// we are basically inside light source, so just return 1.0
		attenuation = 1.0f;
	}
	else if (dist < distMax)
	{
		// Real-Time Rendering (4th Edition), page 113
		const float windowedFunctionValue = ComputAttenuationWindowedFunction(dist, distMax);

		// Real-Time Rendering (4th Edition), page 111
		const float distanceFalloff = pow(dist0 / dist, 2);

		attenuation = windowedFunctionValue * distanceFalloff;
	}
	
	return attenuation;
}

float ComputeNDF_GGX(float nDotH, float roughness)
{
	float result = 0.0f;
	
	if (nDotH > 0.0f)
	{
		const float roughnessSqr = roughness * roughness;
		
		const float d = 1.0f + nDotH * nDotH * (roughnessSqr - 1.0f);
		
		result = roughnessSqr / (M_PI * d * d);
	}
	
	return result;
}

float ComputeG2_Smith_GGX(float nDotL, float nDotV, float roughness)
{
	// Actually represents
	// G2 / (4 * nDotL * nDotV) 	
	
	float result = 0.0f;
	
	if (nDotL != 0.0f && nDotV != 0.0f)
	{
		nDotL = abs(nDotL);
		nDotV = abs(nDotV);
		
		result = 0.5f / (lerp(2.0f * nDotL * nDotV, nDotL + nDotV, roughness));
	}
	
	return result;
}

float3 ComputeFresnel_Schlick(float3 f0, float nDotL)
{
	nDotL = max(0.0f, nDotL);
	
	const float a = 1.0f - nDotL;
	const float sqrA = a * a;

	return f0 + (1.0f.xxx - f0) * sqrA * sqrA * a; 
}

float3 ComputeSpecularBRDF(float3 n, float3 l, float3 v, float3 albedo, float roughness, float metalness, float reflectance)
{
	const float3 h = (l + v) / length(l + v);
	
	const float nDotL = dot(n, l);
	const float nDotV = dot(n, v);
	const float nDotH = dot(n, h);
	
	const float D = ComputeNDF_GGX(nDotH, roughness);
	// Also includes 4 * nDotL * nDotV denominator term
	const float G2 = ComputeG2_Smith_GGX(nDotL, nDotV, roughness);
	
	// Metalness might be between 0 and 1 so we need to compute 2 Fresnels and interpolate
	const float3 F_metal = ComputeFresnel_Schlick(albedo, nDotL);
	
	// https://media.contentapi.ea.com/content/dam/eacom/frostbite/files/course-notes-moving-frostbite-to-pbr-v2.pdf#page=13
	const float3 dielectricF0 = GetF0FromRelfectance(reflectance);
	const float3 F_dielectric = ComputeFresnel_Schlick(dielectricF0, nDotL);
	
	const float3 F = lerp(F_dielectric, F_metal, metalness);

	return F * G2 * D; 
}

// Perfomed in world coordinate system
float ComputeRectangleSolidAngle(float3 surfacePoint, float3 p0, float3 p1, float3 p2, float3 p3)
{
	const float3 v0 = p0 - surfacePoint;
	const float3 v1 = p1 - surfacePoint;
	const float3 v2 = p2 - surfacePoint;
	const float3 v3 = p3 - surfacePoint;
	
	const float3 n0 = normalize(cross(v0, v1));
	const float3 n1 = normalize(cross(v1, v2));
	const float3 n2 = normalize(cross(v2, v3));
	const float3 n3 = normalize(cross(v3, v0));
	
	const float g0 = acos(dot(-n0, n1));
	const float g1 = acos(dot(-n1, n2));
	const float g2 = acos(dot(-n2, n3));
	const float g3 = acos(dot(-n3, n0));
	
	return g0 + g1 + g2 + g3 - 2 * M_PI;
} 


float3 ComputeAreaLighting_Specular(float nDotL,
	float3 n,
	float3 l,
	float3 v,
	float3 surfacePoint,
	float3 albedo,
	float3 lightNormal,
	float3 lightPosition,
	float3 lightRight,
	float3 lightUp,
	float2 lightSize, 
	float4 lightColorAndIntensity,
	float maxDist,
	float metalness,
	float reflectance,
	float roughness)
{
	// Note that nDotL for area light is calculated in a specific way

	// https://alextardif.com/arealights.html

	const float3 reflectionVec = reflect(v, n);
	const float3 lightPlaneIntersectPoint = ComputePlaneIntersectionPoint(surfacePoint, 
		reflectionVec, lightNormal, lightPosition);
		
	const float3 intersectionVector = lightPlaneIntersectPoint - lightPosition;
	const float2 intersectPlanePoint = float2(dot(intersectionVector, lightRight), dot(intersectionVector, lightUp));
	// Nearest point on a light plane
	const float2 nearest2DPoint = float2(clamp(intersectPlanePoint.x, -lightSize.x, lightSize.x), clamp(intersectPlanePoint.y, -lightSize.y, lightSize.y));	
	
	// Approximation of specular BRDF 
	float3 specularFactor = float3(0.0f , 0.0f, 0.0f);
	const float specularAmount = dot(reflectionVec, lightNormal);
	// From Fresnel
	const float3 F0 = lerp(GetF0FromRelfectance(reflectance), albedo, metalness);
	
	if (specularAmount > 0.0f)
	{
		const float specLobeSharpness = 0.5f;
		 float specFactor = 1.0f - clamp(length(nearest2DPoint - intersectPlanePoint) * pow((1.0 - sqrt(roughness)), 2.0f) * specLobeSharpness, 0.0f, 1.0f);
		 specularFactor += F0 * specFactor * specularAmount * nDotL;
	}

	const float3 nearestPoint = lightPosition + (lightRight * nearest2DPoint.x + lightUp * nearest2DPoint.y);
	const float dist = distance(surfacePoint, nearestPoint);
	// Use linear cause it looks best for this type of light
	const float attenuation = 1.0f - saturate(dist / maxDist);
	
	return specularFactor * attenuation * lightColorAndIntensity.xyz * lightColorAndIntensity.w * 1.0f; 
}

float3 ComputeAreaLighting_Diffuse(float nDotL, float4 lightColorAndIntensity, float3 albedo, float attenuationWindowedFunctionValue, float metalness)
{
	return nDotL * albedo.xyz *
			lightColorAndIntensity.xyz * lightColorAndIntensity.w * attenuationWindowedFunctionValue * (1.0f - metalness) / M_PI;
}

void ComputeAreaLighting(GPULight light, float4 worldPosition, float3 normal, float4 albedo, float maxDist, float3 cameraPos, float metalness, float roughness, float reflectance, out float3 diffuse, out float3 specular)
{
	const float4 lightNormal = mul(light.worldTransform, float4(0.0f, 0.0f, 1.0f, 0.0f));
	const float4 lightPosition = float4(light.worldTransform[0][3], 
		light.worldTransform[1][3],
		light.worldTransform[2][3], 
		1.0f);
	
	diffuse = float3(0.0f, 0.0f, 0.0f);
	specular = float3(0.0f, 0.0f, 0.0f);
	
	// Ideally it should be 0, but because of problems with floating point math
	// I need to bump it up a bit, to avoid artifacts
	const float lightIsFacingSurfaceThreshold = 0.001f;
	const float3 lightToSurface = worldPosition.xyz - lightPosition.xyz;
	
	// Ignore points behind the light
	if (dot(lightToSurface, lightNormal.xyz) > lightIsFacingSurfaceThreshold )
	{
		// Find points describing light rectangle
		const float4 p0 = mul(light.worldTransform, float4(-light.extends.x / 2.0f, -light.extends.y / 2.0f, 0.0f, 1.0f));
		const float4 p1 = mul(light.worldTransform, float4(-light.extends.x / 2.0f, light.extends.y / 2.0f, 0.0f, 1.0f));
		const float4 p2 = mul(light.worldTransform, float4(light.extends.x / 2.0f, light.extends.y / 2.0f, 0.0f, 1.0f));
		const float4 p3 = mul(light.worldTransform, float4(light.extends.x / 2.0f, -light.extends.y / 2.0f, 0.0f, 1.0f));
		
		const float attenuationWindowedFunctionValue = ComputAttenuationWindowedFunction(length(lightToSurface), maxDist);
		
		const float solidAngle = ComputeRectangleSolidAngle(worldPosition.xyz, p0.xyz, p1.xyz, p2.xyz, p3.xyz);
		const float nDotL = solidAngle * 0.2f * (
			saturate(dot(normalize(p0.xyz - worldPosition.xyz), normal)) +
			saturate(dot(normalize(p1.xyz - worldPosition.xyz), normal)) + 
			saturate(dot(normalize(p2.xyz - worldPosition.xyz), normal)) + 
			saturate(dot(normalize(p3.xyz - worldPosition.xyz), normal)) + 
			saturate(dot(normalize(-lightToSurface), normal)));

		diffuse = ComputeAreaLighting_Diffuse(nDotL, light.colorAndIntensity, albedo.xyz, attenuationWindowedFunctionValue, metalness);
		
		const float4 lightRight = mul(light.worldTransform, float4(1.0f, 0.0f, 0.0f, 0.0f));
		const float4 lightUp = mul(light.worldTransform, float4(0.0f, 1.0f, 0.0f, 0.0f));
		const float3 l = -normalize(worldPosition.xyz - lightPosition.xyz);
		const float3 v = normalize(cameraPos.xyz - worldPosition.xyz);
		
		specular = ComputeAreaLighting_Specular(nDotL,
			normal,
			l,
			v,
			worldPosition.xyz,
			albedo.xyz,
			lightNormal.xyz,
			lightPosition.xyz,
			lightRight.xyz,
			lightUp.xyz,
			light.extends,
			light.colorAndIntensity,
			maxDist,
			metalness,
			reflectance,
			roughness);
		
	}
}


float3 ComputePointLighting_Diffuse(float3 l, float3 n, float3 albedo, float3 lightColor, float lightIntensity, float attenuation, float metalness)
{
	return (1.0f - metalness) * attenuation * max(dot(l, n), 0.0f) * lightIntensity * lightColor * albedo / M_PI;
}

float3 ComputePointLighting_Specular(float3 n, float3 l, float3 v, float3 albedo, float3 lightColor, float lightIntensity, float attenuation, float roughness, float metalness, float reflectance)
{
	const float3 specBRDF = ComputeSpecularBRDF(n, l, v, albedo, roughness, metalness, reflectance);
	
	return attenuation * specBRDF * lightColor * lightIntensity * max(dot(l, n), 0.0f);
}

void ComputePointLighting(GPULight light, float4 worldPosition, float3 normal, float4 cameraPos, float4 albedo, float roughness, float metalness, float reflectance, float maxDist, out float3 diffuse, out float3 specular)
{
	const float3 lightPosition = float3(light.worldTransform[0][3], 
		light.worldTransform[1][3],
		light.worldTransform[2][3]);
		
	float3 pointToLight = lightPosition - worldPosition.xyz;
	
	const float pointToLightDist = length(pointToLight);
	const float attenuation = ComputeDistanceAttenuation(pointToLightDist, light.extends.x, maxDist);
	
	pointToLight = normalize(pointToLight);
	
	diffuse = ComputePointLighting_Diffuse(pointToLight, 
		normal,
		albedo.xyz,
		light.colorAndIntensity.xyz,
		light.colorAndIntensity.w,
		attenuation,
		metalness);
	
	const float3 viewVector = normalize(cameraPos.xyz - worldPosition.xyz);
	
	specular = ComputePointLighting_Specular(normal,
		pointToLight,
		viewVector,
		albedo.xyz,
		light.colorAndIntensity.xyz,
		light.colorAndIntensity.w,
		attenuation,
		roughness, 
		metalness,
		reflectance);
}

[numthreads(16, 16, 1)]
void main(int3 dispatchThreadID : SV_DispatchThreadID)
{
	// Fetch G Buffers data
	const float4 worldPosition = GBuffer_Position[dispatchThreadID.xy];
	const float4 normalAndMat = GBuffer_NormalsMaterial.Load(int3(dispatchThreadID.xy, 0));
	const float4 albedo = GBuffer_Albedo.Load(int3(dispatchThreadID.xy, 0));
	
	const int materialId = asint(normalAndMat.w);
	const float3 normal = normalAndMat.xyz;
	
	float roughness = 0.0f;
	float reflectance = 0.0f;
	float metaliness = 0.0f;
	
	[branch]
	if (IsUseMaterialOverrides == 0)
	{
		const Material material = MaterialList[materialId];
		
		roughness = material.roughness;
		reflectance = material.reflectance;
		metaliness = material.metalness;
	}
	else
	{
		roughness = RoughnessOverride;
		reflectance = ReflectanceOverride;
		metaliness = MetalnessOverride;
	}
	
	roughness = roughness * roughness;
	
	// Find pixel cluster index
	const float4 viewPositon = mul(View, worldPosition);
	const int clusterIndex = GetClusterIndex(dispatchThreadID.xy, viewPositon.z);
	
	const PerClusterLightIndexData perClusterData = PerClusterLightIndexDataList[clusterIndex];
	
	if (perClusterData.count == 0)
	{
		return;
	}
	
	float3 diffuse = float3(0.0f, 0.0f, 0.0f);
	float3 specular = float3(0.0f, 0.0f, 0.0f);
	
	// Iterate over lights and calculate contribution
	for (int lightIndex = 0; lightIndex < perClusterData.count; ++lightIndex)
	{
		const int lightListIndex = ClusteredLightingIndexList[lightIndex + perClusterData.offset];
		GPULight light = LightsList[lightListIndex];
		GPULightBoundingVolume boundingVolume = LightBoundingVolumes[lightListIndex];
		
		const float maxDist = boundingVolume.radius;
		
		float3 lightDiffuse = float3(0.0f, 0.0f, 0.0f);
		float3 lightSpecular = float3(0.0f, 0.0f, 0.0f);
		

		if (light.type == POINT_LIGHT)
		{
#if (ENABLE_POINT_LIGHTS)
			ComputePointLighting(light, worldPosition, normal, CameraOrigin, albedo, roughness, metaliness, reflectance, maxDist, lightDiffuse, lightSpecular);
#endif
		}
		else if (light.type == AREA_LIGHT)
		{
#if (ENABLE_AREA_LIGHTS)
			ComputeAreaLighting(light, worldPosition, normal, albedo, maxDist, CameraOrigin.xyz, metaliness, roughness, reflectance, lightDiffuse, lightSpecular);		
#endif
		}
		
		diffuse += lightDiffuse;
		specular += lightSpecular;
	}
	
	float3 directLight = float3(0.0f, 0.0f, 0.0f);
	
#if (ENABLE_DIFFUSE)
	directLight += diffuse;
#endif
	
#if (ENABLE_SPECULAR)
	directLight += specular;
#endif
	
	DirectLightBuffer[dispatchThreadID.xy] =  float4(directLight, 1.0f);
}

]>