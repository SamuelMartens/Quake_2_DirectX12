PassProperties
{
PassInput : Debug
PassVertAttr: VertexIn
}

State
{
ColorTarget  : COLOR_BACK_BUFFER
DepthTarget  : DEPTH_BACK_BUFFER
Viewport	 : 0.0, 0.0, 1.0, 1.0
BlendEnabled : false
Topology	 : Triangle
}


RootSignature
{
RootFlags (ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT),
CBV(b0, space = 0),
CBV(b0, space = 1),
CBV(b0, space = 3),
DescriptorTable(SRV(t0, numDescriptors = 1, space = 0))
}

// -== Register space convention ==-
//	0 - Global, PerPass
//	1 - Global, PerObject
//	2 - Local, PerPass
//	3 - Local, PerObject

// Attributes

struct VertexIn
{
	float4 Pos : POSITION;
}


struct VertexOut
{
	float4 Pos : SV_POSITION;
	float4 LocalPos : POSITION;
}

// Resources  
[Global, PerPass]
cbuffer cbFrameData : register(b0, space0)
{
	float4x4 InvertedViewProj;
	float4x4 InvertedProj;
    float4x4 ViewProj;
	float4x4 View;
    float4 CameraYaw;
    float4 CameraPitch;
    float4 CameraRoll;
    float4 CameraOrigin;
	float CameraNear;
	float CameraFar;
	int ScreenWidth;
	int ScreenHeight;
	int LightListSize;
}

[Global, PerObject]
cbuffer cbPerObject_Global : register(b0, space1)
{
	int DebugObjectType;
}

[Local, PerObject]
cbuffer cbPerObject_Local : register(b0, space3)
{
	// Probes debug info
	float4 ProbeCenter;
	int ProbeIndex;
}

[Global, PerPass]
StructuredBuffer<float4> DiffuseProbes : register(t0, space0)

// Shaders

Type : VS 
External : cbFrameData, cbPerObject_Local, cbPerObject_Global, VertexIn, VertexOut
<[


#include "Debug.passh"


VertexOut main(VertexIn vIn)
{
	VertexOut vOut;
	// Funny enought, by default matrices are packed as column major.
	vOut.Pos = mul(ViewProj, vIn.Pos);
	
	if (DebugObjectType == DEBUG_OBJECT_LIGHT_PROBE)
	{
		vOut.LocalPos =  vIn.Pos - ProbeCenter; 
	}
	else
	{
		vOut.LocalPos = float4(0.0, 0.0, 0.0, 0.0);
	}

	return vOut;
}
]>

Type : PS 
External : VertexOut, DiffuseProbes, cbPerObject_Global, cbPerObject_Local
<[

#include "Debug.passh"
#include "Constants.passh"
#include "SHUtils.passh"

float4 main(VertexOut vOut) : SV_Target
{
	if (DebugObjectType != DEBUG_OBJECT_LIGHT_PROBE)
	{
		discard;
	}

	float4 color = float4(0.0, 0.0, 0.0, 1.0);
	
	float4 dirFromCenter = float4(normalize(vOut.LocalPos.xyz) * 0.5 + 0.5, 1.0);
	color = dirFromCenter;
		
	if (ProbeIndex != INVALID_INDEX)
	{
		float4 sampleDir = float4(normalize(vOut.LocalPos.xyz), 0.0);
		color = ReconstructRadianceFromSH(sampleDir, ProbeIndex);
	}

    return color;
}
]>